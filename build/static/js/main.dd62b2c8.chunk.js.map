{"version":3,"sources":["Data.js","networkFunctions.js","ModalCard.js","TextEditor.js","CardInfo.js","Avatar.js","Card.js","Header.js","Section.js","CardAddPanel.js","appFunctions.js","HomePage.js","CardPage.js","LoginPage.js","App.js","serviceWorker.js","index.js"],"names":["base","urlCardData","concat","urlCardCreate","urlCardSettings","urlLogin","urlSignUp","serverRequest","_callee","_ref","url","_ref$json","json","_ref$method","method","headers","body","response","regenerator_default","a","wrap","_context","prev","next","fetch","catch","error","Error","sent","abrupt","jsonRequest","stop","_callee2","responseServer","jsonObj","_context2","cardCreate","Content-Type","JSON","stringify","login","_x3","_login","apply","this","arguments","_callee3","_context3","ok","t0","signUp","cardChange","id","ModalCard","_React$Component","_getPrototypeOf2","_this","Object","classCallCheck","_len","length","args","Array","_key","possibleConstructorReturn","getPrototypeOf","call","handleCloseModal","event","props","onCloseModal","stopPropagation","inherits","createClass","key","value","react_default","createElement","onClick","class","children","React","Component","TextEditor","handleChangeText","setState","text","target","handleChangeButton","isEditing","handleCancelButton","handleSaveButton","onChangeText","state","_this$state","onChange","react","CardInfo","handleChangeDescription","description","_this$props","onChangeDescription","card","handleChangeTitle","title","_this$props2","onChangeTitle","handleChangeStatus","_this$props3","onChangeStatus","_this$props4","isChanging","statuses","status","statusOptions","map","label","react_select_browser_esm","defaultValue","options","TextEditor_TextEditor","Avatar","path","initials","src","alt","Card","handleDelete","onDeleteCard","objectSpread","handleModalInfo","onModalInfo","_id","imageSrc","_this$props$avatars","avatars","react_router_dom","to","avatar","Header","amount","Section","cards","headerInfo","Card_Card","assign","CardAddPanel","handleTitleChange","handleCreate","onCreateCard","handleInputKeyPress","type","onKeyPress","findCardById","dataByStatuses","values","find","array","item","HomePage","handleCreateCard","asyncToGenerator","mark","_this$props$dataCard","updateDataByStatuses","dataCard","defineProperty","toConsumableArray","updateData","_x","handleDeleteCard","_ref3","_ref2","_this$props$dataCard2","arrayCards","then","filter","_x2","handleChange","_ref5","_ref4","_this$props$dataCard3","arrayChange","_x4","_ref6","_callee4","newStatus","_objectSpread6","_this$props$dataCard4","newCard","dataByStatusesNew","_context4","_x5","_x6","_ref7","document","style","overflow","idCard","handleLogout","localStorage","removeItem","isLogin","_this2","_this$props$dataCard5","CardAddPanel_CardAddPanel","Section_Section","ModalCard_ModalCard","CardInfo_CardInfo","CardPage","useParams","react_router","LoginPage","buttonText","linkText","linkUrl","message","onSubmitLoginForm","onChangeLoginInput","onSubmit","name","placeholder","App","email","getItem","handlerChangeLoginInput","messageLoginForm","handlerSubmitForm","networkFunction","preventDefault","userEmail","password","userPassword","setItem","t1","t2","dataRequest","t3","t4","t5","reduce","acc","forEach","push","exact","HomePage_HomePage","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"4SAAIA,EAAO,wCAEAC,EAAW,GAAAC,OAAMF,EAAN,UACXG,EAAa,GAAAD,OAAMF,EAAN,SACbI,EAAe,GAAAF,OAAMF,EAAN,aACfK,EAAQ,GAAAH,OAAMF,EAAN,UACRM,EAAS,GAAAJ,OAAMF,EAAN,sBCJLO,+EAAf,SAAAC,EAAAC,GAAA,IAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAA8Bb,EAA9BD,EAA8BC,IAA9BC,EAAAF,EAAmCG,YAAnC,IAAAD,KAAAE,EAAAJ,EAAgDK,cAAhD,IAAAD,EAAyD,MAAzDA,EAAgEE,EAAhEN,EAAgEM,QAASC,EAAzEP,EAAyEO,KAAzEK,EAAAE,KAAA,EACyBC,MAAMd,EAAK,CAC5BI,SACAC,UACAC,SACDS,MAAM,SAAAC,GACL,MAAM,IAAIC,MAAM,qBANxB,cACQV,EADRI,EAAAO,KAAAP,EAAAQ,OAAA,SASWjB,EAAOkB,EAAYb,GAAYA,GAT1C,wBAAAI,EAAAU,SAAAvB,sCAYesB,+EAAf,SAAAE,EAA2BC,GAA3B,IAAAC,EAAA,OAAAhB,EAAAC,EAAAC,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAAY,EAAAZ,KAAA,EACwBU,EAAerB,OAAOa,MAAM,SAAAC,GAC5C,MAAM,IAAIC,MAAM,iBAFxB,cACQO,EADRC,EAAAP,KAAAO,EAAAN,OAAA,SAKWK,GALX,wBAAAC,EAAAJ,SAAAC,6BAgBO,SAASI,EAAWpB,GACvB,OAAOT,EAAc,CACjBG,IAAKP,EACLW,OAAQ,OACRC,QAAS,CACLsB,eAAgB,kCAEpBrB,KAAMsB,KAAKC,UAAUvB,KActB,SAAewB,EAAtBC,GAAA,OAAAC,EAAAC,MAAAC,KAAAC,sDAAO,SAAAC,EAAqB9B,GAArB,IAAAC,EAAA,OAAAC,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAAwB,EAAAxB,KAAA,EACkBhB,EAAc,CAC/BG,IAAKL,EACLS,OAAQ,OACRF,MAAM,EACNG,QAAS,CACLsB,eAAgB,kCAEpBrB,KAAMsB,KAAKC,UAAUvB,KARtB,YACCC,EADD8B,EAAAnB,MAWaoB,GAXb,CAAAD,EAAAxB,KAAA,eAAAwB,EAAAxB,KAAA,EAWwBO,EAAYb,GAXpC,OAAA8B,EAAAE,GAAAF,EAAAnB,KAAAmB,EAAAxB,KAAA,gBAAAwB,EAAAE,GAWgDhC,EAXhD,eAAA8B,EAAAlB,OAAA,SAAAkB,EAAAE,IAAA,yBAAAF,EAAAhB,SAAAe,6BAcA,SAASI,EAAOlC,GACnB,OAAOT,EAAc,CACjBG,IAAKJ,EACLQ,OAAQ,OACRC,QAAS,CACLsB,eAAgB,kCAEpBrB,KAAMsB,KAAKC,UAAUvB,KAItB,SAASmC,EAAWC,EAAIpC,GAC3B,OAAOT,EAAc,CACjBG,IAAG,GAAAR,OAAKC,EAAL,KAAAD,OAAsBkD,GACzBtC,OAAQ,MACRC,QAAS,CACLsB,eAAgB,kCAEpBrB,KAAMsB,KAAKC,UAAUvB,iBC/EhBqC,SAAb,SAAAC,GAAA,SAAAD,IAAA,IAAAE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAS,GAAA,QAAAM,EAAAd,UAAAe,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlB,UAAAkB,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAb,MAAAW,EAAAE,OAAAQ,EAAA,EAAAR,CAAAJ,IAAAa,KAAAvB,MAAAY,EAAA,CAAAX,MAAA1C,OAAA2D,MACIM,iBAAmB,SAACC,GAChBZ,EAAKa,MAAMC,eAEXF,EAAMG,mBAJdf,EAAA,OAAAC,OAAAe,EAAA,EAAAf,CAAAJ,EAAAC,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAJ,EAAA,EAAAqB,IAAA,SAAAC,MAAA,WAQQ,OACIC,EAAAzD,EAAA0D,cAAA,OAAKC,QAASlC,KAAKuB,iBAAkBY,MAAM,iBACvCH,EAAAzD,EAAA0D,cAAA,OAAKC,QAAS,SAACV,GAAD,OAAWA,EAAMG,mBAAmBQ,MAAM,gBACpDH,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,YACPH,EAAAzD,EAAA0D,cAAA,OAAKC,QAASlC,KAAKuB,iBAAkBY,MAAM,gBAA3C,SAEHnC,KAAKyB,MAAMW,iBAdhC3B,EAAA,CAA+B4B,IAAMC,oBCFxBC,EAAb,SAAA7B,GACI,SAAA6B,EAAYd,GAAO,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAuC,IACf3B,EAAAC,OAAAO,EAAA,EAAAP,CAAAb,KAAAa,OAAAQ,EAAA,EAAAR,CAAA0B,GAAAjB,KAAAtB,KAAMyB,KAOVe,iBAAmB,SAAChB,GAChBZ,EAAK6B,SAAS,CACVC,KAAMlB,EAAMmB,OAAOZ,SAVRnB,EAcnBgC,mBAAqB,WACjBhC,EAAK6B,SAAS,CACVI,WAAW,KAhBAjC,EAoBnBkC,mBAAqB,WACjBlC,EAAK6B,SAAS,CACVI,WAAW,EACXH,KAAM9B,EAAKa,MAAMiB,QAvBN9B,EA2BnBmC,iBAAmB,YAIfC,EAHuBpC,EAAKa,MAArBuB,cACQpC,EAAKqC,MAAbP,MAIP9B,EAAK6B,SAAS,CACVI,WAAW,KAhCfjC,EAAKqC,MAAQ,CACTJ,WAAW,EACXH,KAAMjB,EAAMiB,MAJD9B,EADvB,OAAAC,OAAAe,EAAA,EAAAf,CAAA0B,EAAA7B,GAAAG,OAAAgB,EAAA,EAAAhB,CAAA0B,EAAA,EAAAT,IAAA,SAAAC,MAAA,WAuCa,IAAAmB,EACqBlD,KAAKiD,MAAxBJ,EADFK,EACEL,UAAWH,EADbQ,EACaR,KAElB,OACIV,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,YACPH,EAAAzD,EAAA0D,cAAA,WACKY,EACKb,EAAAzD,EAAA0D,cAAA,YAAUkB,SAAUnD,KAAKwC,kBAAmBE,GAC5CA,GAGVV,EAAAzD,EAAA0D,cAAA,WACKY,EACKb,EAAAzD,EAAA0D,cAACmB,EAAA,SAAD,KACEpB,EAAAzD,EAAA0D,cAAA,UAAQC,QAASlC,KAAK+C,kBAAtB,QACAf,EAAAzD,EAAA0D,cAAA,UAAQC,QAASlC,KAAK8C,oBAAtB,WAEFd,EAAAzD,EAAA0D,cAAA,UAAQC,QAASlC,KAAK4C,oBAAtB,cAxD1BL,EAAA,CAAgCF,IAAMC,WCIzBe,EAAb,SAAA3C,GAAA,SAAA2C,IAAA,IAAA1C,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAqD,GAAA,QAAAtC,EAAAd,UAAAe,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlB,UAAAkB,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAb,MAAAW,EAAAE,OAAAQ,EAAA,EAAAR,CAAAwC,IAAA/B,KAAAvB,MAAAY,EAAA,CAAAX,MAAA1C,OAAA2D,MACIqC,wBAA0B,SAACC,GAAgB,IAAAC,EACH5C,EAAKa,OAEzCgC,EAHuCD,EAChCC,qBAEaF,EAHmBC,EACXE,OAFpC9C,EAOI+C,kBAAoB,SAACC,GAAU,IAAAC,EACGjD,EAAKa,OAEnCqC,EAH2BD,EACpBC,eAEOF,EAHaC,EACLH,OAR9B9C,EAaImD,mBAAqB,SAAAlG,GAAa,IAAXkE,EAAWlE,EAAXkE,MAAWiC,EACCpD,EAAKa,OAEpCwC,EAH8BD,EACvBC,gBAEQlC,EAHeiC,EACPN,OAd/B9C,EAAA,OAAAC,OAAAe,EAAA,EAAAf,CAAAwC,EAAA3C,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAwC,EAAA,EAAAvB,IAAA,SAAAC,MAAA,WAmBa,IAAAmC,EAC8BlE,KAAKyB,MAAnC0C,EADAD,EACAC,WAAYC,EADZF,EACYE,SAAUV,EADtBQ,EACsBR,KACtBW,EAA8BX,EAA9BW,OAAQT,EAAsBF,EAAtBE,MAAOL,EAAeG,EAAfH,YAEhBe,EAAgBF,GAAYA,EAASG,IAAI,SAAAxC,GAAK,MAAK,CAACA,QAAOyC,MAAOzC,KAEtE,OACIC,EAAAzD,EAAA0D,cAAA,WACID,EAAAzD,EAAA0D,cAAA,WACKkC,EACKnC,EAAAzD,EAAA0D,cAACmB,EAAA,SAAD,KACEpB,EAAAzD,EAAA0D,cAACwC,EAAA,EAAD,CACIC,aAAc,CAAC3C,MAAOsC,EAAQG,MAAOH,GACrCM,QAASL,EACTnB,SAAUnD,KAAK+D,qBAEnB/B,EAAAzD,EAAA0D,cAAC2C,EAAD,CACIlC,KAAMkB,EACNZ,aAAchD,KAAK2D,oBAEvB3B,EAAAzD,EAAA0D,cAAC2C,EAAD,CACIlC,KAAMa,EACNP,aAAchD,KAAKsD,2BAGzBtB,EAAAzD,EAAA0D,cAAA,WACED,EAAAzD,EAAA0D,cAAA,oBAAA3E,OAAe+G,IACfrC,EAAAzD,EAAA0D,cAAA,mBAAA3E,OAAcsG,IACd5B,EAAAzD,EAAA0D,cAAA,SAAIsB,UA/ChCF,EAAA,CAA8BhB,IAAMC,WCF7B,SAASuC,EAAThH,GAAoC,IAAlBiH,EAAkBjH,EAAlBiH,KAAMC,EAAYlH,EAAZkH,SAC3B,OAAID,EAEI9C,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,4CAA4C6C,IAAKF,EAAMG,IAAI,KAItEjD,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,gDAAgD4C,GCJhE,IAAMG,EAAb,SAAAxE,GAAA,SAAAwE,IAAA,IAAAvE,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAkF,GAAA,QAAAnE,EAAAd,UAAAe,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlB,UAAAkB,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAb,MAAAW,EAAAE,OAAAQ,EAAA,EAAAR,CAAAqE,IAAA5D,KAAAvB,MAAAY,EAAA,CAAAX,MAAA1C,OAAA2D,MACEkE,aAAe,SAAC3D,GACdZ,EAAKa,MAAM2D,aAAXvE,OAAAwE,EAAA,EAAAxE,CAAA,GAA4BD,EAAKa,QAEjCD,EAAMG,mBAJVf,EAOE0E,gBAAkB,SAAC9D,GACjBZ,EAAKa,MAAM8D,YAAY3E,EAAKa,OAE5BD,EAAMG,mBAVVf,EAAA,OAAAC,OAAAe,EAAA,EAAAf,CAAAqE,EAAAxE,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAqE,EAAA,EAAApD,IAAA,SAAAC,MAAA,WAaW,IAAAyB,EACkDxD,KAAKyB,MAAvD+D,EADAhC,EACAgC,IAAKC,EADLjC,EACKiC,SAAS7B,EADdJ,EACcI,MAAOL,EADrBC,EACqBD,YADrBmC,EAAAlC,EACkCmC,eADlC,IAAAD,EAC4C,GAD5CA,EAGP,OACE1D,EAAAzD,EAAA0D,cAAA,OAAKC,QAASlC,KAAKsF,gBAAiBnD,MAAM,4BACxCH,EAAAzD,EAAA0D,cAAA,OAAKC,QAAS,SAAAV,GAAK,OAAIA,EAAMG,mBAAmBQ,MAAM,YACpDH,EAAAzD,EAAA0D,cAAC2D,EAAA,EAAD,CAAMzD,MAAM,qBAAqB0D,GAAIL,GAArC,QACAxD,EAAAzD,EAAA0D,cAAA,OAAKC,QAASlC,KAAKmF,aAAchD,MAAM,kBAAvC,SAEFH,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,sBAAsByB,GAChC6B,EAAWzD,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,qBAAqB6C,IAAKS,EAAUR,IAAI,KAAY,KAC3EjD,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,8BACPH,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,0BAA0BoB,GACrCvB,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,oCAELwD,EAAQpB,IAAI,SAAAuB,GAAM,OAAM9D,EAAAzD,EAAA0D,cAAC4C,EAAWiB,YA5BtDZ,EAAA,CAA0B7C,IAAMC,WCJzB,SAASyD,EAATlI,GAAgC,IAAf6E,EAAe7E,EAAf6E,KAAMsD,EAASnI,EAATmI,OAC1B,OACIhE,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,2BACPH,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,uBAAuBO,GAClCV,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,qCAAqC6D,ICDrD,IAAMC,EAAb,SAAAvF,GAAA,SAAAuF,IAAA,OAAApF,OAAAC,EAAA,EAAAD,CAAAb,KAAAiG,GAAApF,OAAAO,EAAA,EAAAP,CAAAb,KAAAa,OAAAQ,EAAA,EAAAR,CAAAoF,GAAAlG,MAAAC,KAAAC,YAAA,OAAAY,OAAAe,EAAA,EAAAf,CAAAoF,EAAAvF,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAoF,EAAA,EAAAnE,IAAA,SAAAC,MAAA,WAEa,IAAAyB,EAC8CxD,KAAKyB,MAAjD4C,EADFb,EACEa,OAAQ6B,EADV1C,EACU0C,MAAOX,EADjB/B,EACiB+B,YAAaH,EAD9B5B,EAC8B4B,aAE/Be,EAAa,CACbzD,KAAM2B,EACN2B,OAAQE,EAAMlF,QAGlB,OACIgB,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,uBACPH,EAAAzD,EAAA0D,cAAC8D,EAAWI,GAERD,GAASA,EAAM3B,IAAI,SAAAb,GAAI,OACnB1B,EAAAzD,EAAA0D,cAACmE,EAADvF,OAAAwF,OAAA,CACIvE,IAAK4B,EAAK8B,IACVJ,aAAcA,EACdG,YAAaA,GACT7B,WAnBhCuC,EAAA,CAA6B5D,IAAMC,WCHtBgE,EAAb,SAAA5F,GACI,SAAA4F,EAAY7E,GAAO,IAAAb,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAsG,IACf1F,EAAAC,OAAAO,EAAA,EAAAP,CAAAb,KAAAa,OAAAQ,EAAA,EAAAR,CAAAyF,GAAAhF,KAAAtB,KAAMyB,KAIV8E,kBAAoB,SAAA1I,GAAe,IAAb8E,EAAa9E,EAAb8E,OAClB/B,EAAK6B,SAAS,CAACmB,MAAOjB,EAAOZ,SANdnB,EASnB4F,aAAe,SAAChF,GACZZ,EAAKa,MAAMgF,aAAa7F,EAAKqC,MAAMW,OAEnChD,EAAK6B,SAAS,CAACmB,MAAO,MAZPhD,EAenB8F,oBAAsB,SAAClF,GACD,UAAdA,EAAMM,KACNlB,EAAK4F,gBAfT5F,EAAKqC,MAAQ,CAACW,MAAO,IAFNhD,EADvB,OAAAC,OAAAe,EAAA,EAAAf,CAAAyF,EAAA5F,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAyF,EAAA,EAAAxE,IAAA,SAAAC,MAAA,WAuBQ,OACIC,EAAAzD,EAAA0D,cAAA,WACID,EAAAzD,EAAA0D,cAAA,SAAO0E,KAAK,OAAO5E,MAAO/B,KAAKiD,MAAMW,MAAOT,SAAUnD,KAAKuG,kBAAmBK,WAAY5G,KAAK0G,sBAC/F1E,EAAAzD,EAAA0D,cAAA,UAAQC,QAASlC,KAAKwG,cAAtB,eA1BhBF,EAAA,CAAkCjE,IAAMC,WCHjC,SAASuE,EAAarG,EAAIsG,GAC7B,IAAIpD,EAAO,KAMX,OAJAoD,GAAkBjG,OAAOkG,OAAOD,GAAgBE,KAAK,SAAAC,GAAK,OACtDvD,EAAOuD,EAAMD,KAAK,SAAAE,GAAI,OAAIA,EAAK1B,MAAQhF,MAGpCkD,GAAQ,KCGZ,IAAMyD,EAAb,SAAAzG,GAAA,SAAAyG,IAAA,IAAAxG,EAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAmH,GAAA,QAAApG,EAAAd,UAAAe,OAAAC,EAAA,IAAAC,MAAAH,GAAAI,EAAA,EAAAA,EAAAJ,EAAAI,IAAAF,EAAAE,GAAAlB,UAAAkB,GAAA,OAAAP,EAAAC,OAAAO,EAAA,EAAAP,CAAAb,MAAAW,EAAAE,OAAAQ,EAAA,EAAAR,CAAAsG,IAAA7F,KAAAvB,MAAAY,EAAA,CAAAX,MAAA1C,OAAA2D,MACImG,iBADJ,eAAAvJ,EAAAgD,OAAAwG,EAAA,EAAAxG,CAAAvC,EAAAC,EAAA+I,KACuB,SAAA1J,EAAMgG,GAAN,IAAA2D,EAAAnD,EAAA0C,EAAA1I,EAAAsF,EAAAW,EAAAmD,EAAA,OAAAlJ,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAA4I,EACoB3G,EAAKa,MAAMgG,SAAvCrD,EADQmD,EACRnD,SAAU0C,EADFS,EACET,eACb1I,EAAO,CAACwF,SAFGnF,EAAAE,KAAA,EAIEa,EAAWpB,GAJb,OAIXsF,EAJWjF,EAAAO,KAMVqF,EAAUX,EAAVW,OACDmD,EAPW3G,OAAAwE,EAAA,EAAAxE,CAAA,GAQRiG,EARQjG,OAAA6G,EAAA,EAAA7G,CAAA,GASVwD,EATU,GAAA/G,OAAAuD,OAAA8G,EAAA,EAAA9G,CASIiG,EAAezC,IAAW,IAT9B,CASmCX,MAGlD9C,EAAKa,MAAMmG,WAAW,CAClBH,SAAU,CACNX,eAAgBU,EAChBpD,cAfO,wBAAA3F,EAAAU,SAAAvB,MADvB,gBAAAiK,GAAA,OAAAhK,EAAAkC,MAAAC,KAAAC,YAAA,GAAAW,EAqBIkH,iBArBJ,eAAAC,EAAAlH,OAAAwG,EAAA,EAAAxG,CAAAvC,EAAAC,EAAA+I,KAqBuB,SAAAlI,EAAA4I,GAAA,IAAAxC,EAAAnB,EAAA4D,EAAA7D,EAAA0C,EAAAoB,EAAAV,EAAA,OAAAlJ,EAAAC,EAAAC,KAAA,SAAAe,GAAA,cAAAA,EAAAb,KAAAa,EAAAZ,MAAA,cAAO6G,EAAPwC,EAAOxC,IAAKnB,EAAZ2D,EAAY3D,OAAZ4D,EACoBrH,EAAKa,MAAMgG,SAAvCrD,EADQ6D,EACR7D,SAAU0C,EADFmB,EACEnB,eADFvH,EAAAZ,KAAA,EVUI6B,EUPIgF,EVQpB7H,EAAc,CACjBG,IAAG,GAAAR,OAAKC,EAAL,KAAAD,OAAsBkD,GACzBxC,MAAM,EACNE,OAAQ,WACTiK,KAAK,SAAAH,GACJ,OADcA,EAAR5H,KUfS,UAAAb,EAAAP,KAAA,CAAAO,EAAAZ,KAAA,eAAAY,EAAAN,OAAA,iBAOXiJ,EAAapB,EAAezC,GAAQ+D,OAAO,SAAAlB,GAAI,OAAIA,EAAK1B,MAAQA,IAChEgC,EARW3G,OAAAwE,EAAA,EAAAxE,CAAA,GASRiG,EATQjG,OAAA6G,EAAA,EAAA7G,CAAA,GAUVwD,EAAS6D,IAGTA,EAAWlH,eACLwG,EAAqBnD,GAGhCzD,EAAKa,MAAMmG,WAAW,CAClBH,SAAU,CACNX,eAAgBU,EAChBpD,cApBO,yBAAA7E,EAAAJ,OVUhB,IAAoBqB,GUVJpB,MArBvB,gBAAAiJ,GAAA,OAAAN,EAAAhI,MAAAC,KAAAC,YAAA,GAAAW,EA8CI0H,aAAe,SAACxG,GAAD,sBAAAyG,EAAA1H,OAAAwG,EAAA,EAAAxG,CAAAvC,EAAAC,EAAA+I,KAAU,SAAApH,EAAM6B,EAANyG,GAAA,IAAAhD,EAAAnB,EAAAoE,EAAArE,EAAA0C,EAAA4B,EAAA,OAAApK,EAAAC,EAAAC,KAAA,SAAA2B,GAAA,cAAAA,EAAAzB,KAAAyB,EAAAxB,MAAA,cAAc6G,EAAdgD,EAAchD,IAAKnB,EAAnBmE,EAAmBnE,OAAnBoE,EACc7H,EAAKa,MAAMgG,SAAvCrD,EADcqE,EACdrE,SAAU0C,EADI2B,EACJ3B,eADI3G,EAAAxB,KAAA,EAGf4B,EAAWiF,EAAD3E,OAAA6G,EAAA,EAAA7G,CAAA,GAAQiB,EAAMC,IAHT,OAKjB2G,EAAc5B,EAAezC,GAAQE,IAAI,SAAA2C,GAAI,OAAIA,EAAK1B,MAAQA,EAAb3E,OAAAwE,EAAA,EAAAxE,CAAA,GAC3CqG,EAD2CrG,OAAA6G,EAAA,EAAA7G,CAAA,GACpCiB,EAAMC,IACjBmF,IAGNtG,EAAKa,MAAMmG,WAAW,CAClBH,SAAU,CACNX,eAAejG,OAAAwE,EAAA,EAAAxE,CAAA,GACRiG,EADOjG,OAAA6G,EAAA,EAAA7G,CAAA,GAETwD,EAASqE,IAEdtE,cAhBa,wBAAAjE,EAAAhB,SAAAe,MAAV,gBAAAL,EAAA8I,GAAA,OAAAJ,EAAAxI,MAAAC,KAAAC,YAAA,IA9CnBW,EAmEImD,mBAnEJ,eAAA6E,EAAA/H,OAAAwG,EAAA,EAAAxG,CAAAvC,EAAAC,EAAA+I,KAmEyB,SAAAuB,EAAMC,EAAWpF,GAAjB,IAAAqF,EAAAC,EAAA5E,EAAA0C,EAAAtB,EAAAnB,EAAAqE,EAAAO,EAAAC,EAAA,OAAA5K,EAAAC,EAAAC,KAAA,SAAA2K,GAAA,cAAAA,EAAAzK,KAAAyK,EAAAxK,MAAA,cAAAqK,EACgBpI,EAAKa,MAAMgG,SAAvCrD,EADY4E,EACZ5E,SAAU0C,EADEkC,EACFlC,eACVtB,EAAe9B,EAAf8B,IAAKnB,EAAUX,EAAVW,OAFO8E,EAAAxK,KAAA,EAIX4B,EAAWiF,EAAK,CAACnB,OAAQyE,IAJd,OAMbJ,EAAc5B,EAAezC,GAAQ+D,OAAO,SAAAlB,GAAI,OAAIA,EAAK1B,MAAQA,IACjEyD,EAPapI,OAAAwE,EAAA,EAAAxE,CAAA,GAQV6C,EARU,CASbW,OAAQyE,IAERI,EAXarI,OAAAwE,EAAA,EAAAxE,CAAA,GAYViG,GAZUiC,EAAA,GAAAlI,OAAA6G,EAAA,EAAA7G,CAAAkI,EAaZ1E,EAASqE,GAbG7H,OAAA6G,EAAA,EAAA7G,CAAAkI,EAcZD,EAdY,GAAAxL,OAAAuD,OAAA8G,EAAA,EAAA9G,CAcIiG,EAAegC,IAdnB,CAc+BG,KAd/BF,IAiBjBnI,EAAKa,MAAMmG,WAAW,CAClBH,SAAU,CACNX,eAAgBoC,EAChB9E,cApBS,wBAAA+E,EAAAhK,SAAA0J,MAnEzB,gBAAAO,EAAAC,GAAA,OAAAT,EAAA7I,MAAAC,KAAAC,YAAA,GAAAW,EA4FI0E,gBAAkB,SAAAgE,GAAW,IAAT9D,EAAS8D,EAAT9D,IAChB+D,SAASnL,KAAKoL,MAAMC,SAAW,SAE/B7I,EAAKa,MAAMmG,WAAW,CAClB8B,OAAQlE,KAhGpB5E,EAoGIW,iBAAmB,WACfgI,SAASnL,KAAKoL,MAAMC,SAAW,UAE/B7I,EAAKa,MAAMmG,WAAW,CAClB8B,OAAQ,QAxGpB9I,EA4GI+I,aAAe,WACXC,aAAaC,WAAW,SAExBjJ,EAAKa,MAAMmG,WAAW,CAClBkC,SAAS,KAhHrBlJ,EAAA,OAAAC,OAAAe,EAAA,EAAAf,CAAAsG,EAAAzG,GAAAG,OAAAgB,EAAA,EAAAhB,CAAAsG,EAAA,EAAArF,IAAA,SAAAC,MAAA,WAoHa,IAAAgI,EAAA/J,KACE0J,EAAU1J,KAAKyB,MAAfiI,OADFM,EAE8BhK,KAAKyB,MAAMgG,SAAvCrD,EAFF4F,EAEE5F,SAAU0C,EAFZkD,EAEYlD,eAEjB,OACI9E,EAAAzD,EAAA0D,cAACmB,EAAA,SAAD,KACIpB,EAAAzD,EAAA0D,cAACgI,EAAD,CAAcxD,aAAczG,KAAKoH,mBACjCpF,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,6BACPH,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,YACNiC,GAAYA,EAASG,IAAI,SAAAF,GAAM,OAC5BrC,EAAAzD,EAAA0D,cAACiI,EAAD,CACI7F,OAAQA,EACR6B,MAAOY,EAAezC,IAAW,GACjCe,aAAc2E,EAAKjC,iBACnBvC,YAAawE,EAAKzE,qBAG9BtD,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,sCACPH,EAAAzD,EAAA0D,cAAA,UAAQC,QAASlC,KAAK2J,aAAcxH,MAAM,iBAA1C,YAGPuH,GACG1H,EAAAzD,EAAA0D,cAACkI,EAAD,CACIzI,aAAc1B,KAAKuB,kBAElB,kBAAMS,EAAAzD,EAAA0D,cAACmI,EAAD,CACHjG,YAAY,EACZC,SAAUA,EACVV,KAAMmD,EAAa6C,EAAQ5C,GAC3B7C,eAAgB8F,EAAKhG,mBACrBD,cAAeiG,EAAKzB,aAAa,SACjC7E,oBAAqBsG,EAAKzB,aAAa,wBAnJnEnB,EAAA,CAA8B9E,IAAMC,WCA7B,SAAS+H,EAATxM,GAAoC,IAAjBiJ,EAAiBjJ,EAAjBiJ,eAElBpD,EAAOmD,EADAyD,cAAN9J,GACuBsG,GAE5B,OACIpD,EACE1B,EAAAzD,EAAA0D,cAAA,WACED,EAAAzD,EAAA0D,cAACmI,EAAD,CAAU1G,KAAMA,KAElB1B,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,CAAU1E,GAAG,MCfhB,SAAS2E,EAAT3M,GAAoG,IAAhF4M,EAAgF5M,EAAhF4M,WAAYC,EAAoE7M,EAApE6M,SAAUC,EAA0D9M,EAA1D8M,QAASC,EAAiD/M,EAAjD+M,QAASC,EAAwChN,EAAxCgN,kBAAmBC,EAAqBjN,EAArBiN,mBAClF,OACI9I,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,iBACPH,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,4BACPH,EAAAzD,EAAA0D,cAAA,QAAM8I,SAAUF,EAAmB1I,MAAM,eACpCyI,GAAW5I,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,wBAAwByI,GAC/C5I,EAAAzD,EAAA0D,cAAA,SAAOkB,SAAU2H,EAAoB3I,MAAM,sBAAsBwE,KAAK,OAAOqE,KAAK,YAAYC,YAAY,0BAC1GjJ,EAAAzD,EAAA0D,cAAA,SAAOkB,SAAU2H,EAAoB3I,MAAM,yBAAyBwE,KAAK,WAAWqE,KAAK,eAAeC,YAAY,aACpHjJ,EAAAzD,EAAA0D,cAAA,OAAKE,MAAM,uBACPH,EAAAzD,EAAA0D,cAAA,UAAQE,MAAM,sBAAsB6I,KAAMP,GAAaA,GACvDzI,EAAAzD,EAAA0D,cAAC2D,EAAA,EAAD,CAAMzD,MAAM,aAAa0D,GAAI8E,GAAWD,WCiIjDQ,cA9HX,SAAAA,EAAYzJ,GAAO,IAAAb,EAAAC,OAAAC,EAAA,EAAAD,CAAAb,KAAAkL,GACf,IAAIC,EAAQvB,aAAawB,QAAQ,SADlB,OAGfxK,EAAAC,OAAAO,EAAA,EAAAP,CAAAb,KAAAa,OAAAQ,EAAA,EAAAR,CAAAqK,GAAA5J,KAAAtB,KAAMyB,KA0CVmG,WAAa,SAAC7F,GACVnB,EAAK6B,SAASV,IA9CCnB,EAiDnByK,wBAA0B,SAAAxN,GAAc,IAAZ8E,EAAY9E,EAAZ8E,OACjBZ,EAAeY,EAAfZ,MAAOiJ,EAAQrI,EAARqI,KAEdpK,EAAK6B,SAAL5B,OAAA6G,EAAA,EAAA7G,CAAA,CACIyK,iBAAkB,MACjBN,EAAOjJ,KAtDGnB,EA0DnB2K,kBAAoB,SAACC,GAAD,sBAAAxD,EAAAnH,OAAAwG,EAAA,EAAAxG,CAAAvC,EAAAC,EAAA+I,KAAqB,SAAA1J,EAAM4D,GAAN,IAAApD,EAAAC,EAAA8M,EAAA,OAAA7M,EAAAC,EAAAC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cACrC6C,EAAMiK,iBAEFrN,EAAO,CACP+M,MAAOvK,EAAKqC,MAAMyI,UAClBC,SAAU/K,EAAKqC,MAAM2I,cALYnN,EAAAE,KAAA,EAQhB6M,EAAgBpN,GARA,UAQjCC,EARiCI,EAAAO,KAUrC4K,aAAaiC,QAAQ,QAASxN,EAAS8M,OAElCA,EAAS9M,EAAT8M,MAZgC1M,EAAA4B,GAAAO,EAAAnC,EAAAqN,KAetBX,EAfsB1M,EAAAsN,GAgBfZ,EAAQ,KAAO,4BACvBA,EAjBuB,CAAA1M,EAAAE,KAAA,gBAAAF,EAAAE,KAAA,GAiBTiC,EAAKoL,cAjBI,QAAAvN,EAAAwN,GAAAxN,EAAAO,KAAAP,EAAAE,KAAA,iBAAAF,EAAAwN,GAiBY,GAjBZ,QAAAxN,EAAAyN,GAAAzN,EAAAwN,GAAAxN,EAAA0N,GAAA,CAejCrC,QAfiCrL,EAAAqN,GAgBjCR,iBAhBiC7M,EAAAsN,GAiBjCtE,SAjBiChJ,EAAAyN,IAAAzN,EAAA4B,GAchCoC,SAdgCnB,KAAA7C,EAAA4B,GAAA5B,EAAA0N,IAAA,yBAAA1N,EAAAU,SAAAvB,MAArB,gBAAAiK,GAAA,OAAAG,EAAAjI,MAAAC,KAAAC,YAAA,IAtDhBW,EAAKqC,MAAQ,CACTwE,SAAU,CACNrD,SAAU,KACV0C,eAAgB,MAEpB4C,OAAQ,KACRI,UAAWqB,EACXA,SAXWvK,oMAgBRuK,EAASnL,KAAKiD,MAAdkI,WAEPnL,MACcmL,kCAAcnL,KAAKgM,4DAAgB,0BAA7CvE,oBADChF,oSbZF9E,EAAc,CAACG,IAAKN,kBakBnB4G,kBbdDzG,EAAc,CAACG,IAAKT,kBaenB6I,SAEAuB,EAAW,CACXrD,WACA0C,eAAgB1C,EAASgI,OAAO,SAACC,EAAKhI,GAAN,OAAAxD,OAAAwE,EAAA,EAAAxE,CAAA,GACzBwL,EADyBxL,OAAA6G,EAAA,EAAA7G,CAAA,GAE3BwD,EAAS,MACV,KAGR6B,EAAMoG,QAAQ,SAAC5I,GAAS,IACfW,EADexD,OAAAwE,EAAA,EAAAxE,CAAA,GACD6C,GAAdW,OACkBoD,EAAlBX,eAEUzC,GAAQkI,KAAK7I,uBAGzB+D,iIAqCF,IACExE,EAAqBjD,KAArBiD,MAAO2E,EAAc5H,KAAd4H,WADT1E,EAE+BlD,KAAKiD,MAAlC6G,EAFF5G,EAEE4G,QAASwB,EAFXpI,EAEWoI,iBAEhB,OACItJ,EAAAzD,EAAA0D,cAAC2D,EAAA,EAAD,KACI5D,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,KACKT,EACK9H,EAAAzD,EAAA0D,cAACmB,EAAA,SAAD,KACEpB,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,CAAOiC,OAAK,EAAC1H,KAAK,KACd9C,EAAAzD,EAAA0D,cAACwK,EAAD5L,OAAAwF,OAAA,GAAcpD,EAAd,CAAqB2E,WAAYA,MAErC5F,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,CAAOzF,KAAK,QACR9C,EAAAzD,EAAA0D,cAACoI,EAAarK,KAAKiD,MAAMwE,YAG/BzF,EAAAzD,EAAA0D,cAACmB,EAAA,SAAD,KACEpB,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,CAAOiC,OAAK,EAAC1H,KAAK,KACd9C,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,CAAU1E,GAAG,YAEjB7D,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,CAAOzF,KAAK,UACR9C,EAAAzD,EAAA0D,cAACuI,EAAD,CACIC,WAAW,QACXC,SAAS,UACTC,QAAQ,YACRC,QAASU,EACTT,kBAAmB7K,KAAKuL,kBAAkB3L,GAC1CkL,mBAAoB9K,KAAKqL,2BAGjCrJ,EAAAzD,EAAA0D,cAACsI,EAAA,EAAD,CAAOzF,KAAK,aACR9C,EAAAzD,EAAA0D,cAACuI,EAAD,CACIC,WAAW,SACXC,SAAS,QACTC,QAAQ,SACRE,kBAAmB7K,KAAKuL,kBAAkBjL,GAC1CwK,mBAAoB9K,KAAKqL,qCApH3ChJ,IAAMC,WCJJoK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECVNC,IAASC,OACPhL,EAAAzD,EAAA0D,cAACD,EAAAzD,EAAM0O,WAAP,KACEjL,EAAAzD,EAAA0D,cAACiL,EAAD,OAEF3D,SAAS4D,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBnF,KAAK,SAAAoF,GACJA,EAAaC,eAEd3O,MAAM,SAAAC,GACL2O,QAAQ3O,MAAMA,EAAM8L","file":"static/js/main.dd62b2c8.chunk.js","sourcesContent":["let base = 'https://task-manager-by.herokuapp.com';\n\nexport let urlCardData = `${base}/cards`;\nexport let urlCardCreate = `${base}/card`;\nexport let urlCardSettings = `${base}/settings`;\nexport let urlLogin = `${base}/login`;\nexport let urlSignUp = `${base}/register`;","import {urlCardData, urlCardCreate, urlCardSettings, urlSignUp, urlLogin} from './Data';\n\nasync function serverRequest({url, json = true, method = 'GET', headers, body}) {    \n    let response = await fetch(url, {\n        method,\n        headers,\n        body\n    }).catch(error => {\n        throw new Error('Response Error!');\n    });\n\n    return json ? jsonRequest(response) : response\n}\n\nasync function jsonRequest(responseServer) {\n    let jsonObj = await responseServer.json().catch(error => {\n        throw new Error('Json Error!');\n    });   \n\n    return jsonObj;\n}\n\nexport function getSettings() {\n    return serverRequest({url: urlCardSettings});\n}\n\nexport function getDataCards() {\n    return serverRequest({url: urlCardData});\n}\n\nexport function cardCreate(body) {\n    return serverRequest({\n        url: urlCardCreate, \n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(body)\n    });\n}\n\nexport function cardDelete(id) {\n    return serverRequest({\n        url: `${urlCardCreate}/${id}`,\n        json: false,\n        method: 'DELETE'\n    }).then(({ok}) => {\n        return ok;\n    });\n}\n\nexport async function login(body) {\n    let response = await serverRequest({\n        url: urlLogin,        \n        method: 'POST',\n        json: false,\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(body)\n    });\n\n    return response.ok ? await jsonRequest(response) : response\n}\n\nexport function signUp(body) {\n    return serverRequest({\n        url: urlSignUp,        \n        method: 'POST',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(body)\n    });\n}\n\nexport function cardChange(id, body) {\n    return serverRequest({\n        url: `${urlCardCreate}/${id}`,\n        method: 'PUT',\n        headers: {\n            'Content-Type': 'application/json;charset=utf-8'\n        },\n        body: JSON.stringify(body)                \n    });\n}","import React from 'react';\n\nimport './App.css';\n\nexport class ModalCard extends React.Component {\n    handleCloseModal = (event) => {\n        this.props.onCloseModal();\n\n        event.stopPropagation();\n    }\n\n    render() {\n        return (        \n            <div onClick={this.handleCloseModal} class=\"modal-overlay\">\n                <div onClick={(event) => event.stopPropagation()} class=\"modal-window\">\n                    <div class=\"flex-row\">                        \n                        <div onClick={this.handleCloseModal} class=\"button-x-big\">&#xd7;</div>                    \n                    </div>                    \n                    {this.props.children()}\n                </div>            \n            </div>        \n        )\n    }    \n}","import React, {Fragment} from 'react';\n\nexport class TextEditor extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            isEditing: false,\n            text: props.text            \n        }\n    }\n\n    handleChangeText = (event) => {\n        this.setState({\n            text: event.target.value\n        });\n    }\n\n    handleChangeButton = () => {\n        this.setState({\n            isEditing: true\n        });\n    }\n\n    handleCancelButton = () => {\n        this.setState({\n            isEditing: false,\n            text: this.props.text\n        });\n    }\n\n    handleSaveButton = () => {\n        const {onChangeText} = this.props\n        const {text} = this.state\n\n        onChangeText(text);\n\n        this.setState({\n            isEditing: false\n        })\n    }\n\n    render() {\n        const {isEditing, text} = this.state;\n\n        return (\n            <div class=\"flex-row\">\n                <div>\n                    {isEditing \n                        ? <textarea onChange={this.handleChangeText}>{text}</textarea>\n                        : text\n                    }\n                </div>                 \n                <div>\n                    {isEditing \n                        ? <Fragment>\n                            <button onClick={this.handleSaveButton}>Save</button> \n                            <button onClick={this.handleCancelButton}>Cancel</button>\n                        </Fragment>\n                        : <button onClick={this.handleChangeButton}>Edit</button>\n                    }\n                </div>                \n            </div>\n        )\n    }\n}","import React, { Fragment } from 'react';\nimport Select from 'react-select';\n\nimport './App.css';\nimport { TextEditor } from './TextEditor';\n\nexport class CardInfo extends React.Component {\n    handleChangeDescription = (description) => {\n        const {onChangeDescription, card} = this.props;\n\n        onChangeDescription(description, card);        \n    }\n\n    handleChangeTitle = (title) => {\n        const {onChangeTitle, card} = this.props;\n\n        onChangeTitle(title, card);\n    }\n\n    handleChangeStatus = ({value}) => {\n        const {onChangeStatus, card} = this.props;\n\n        onChangeStatus(value, card);        \n    }\n\n    render() {\n        let {isChanging, statuses, card} = this.props;  \n        let {status, title, description} = card;\n\n        let statusOptions = statuses && statuses.map(value => ({value, label: value}));\n\n        return (\n            <div>\n                <div>\n                    {isChanging                        \n                        ? <Fragment> \n                            <Select\n                                defaultValue={{value: status, label: status}}\n                                options={statusOptions}                            \n                                onChange={this.handleChangeStatus}\n                            />\n                            <TextEditor\n                                text={title}\n                                onChangeText={this.handleChangeTitle}\n                            />\n                            <TextEditor\n                                text={description}\n                                onChangeText={this.handleChangeDescription}\n                            />\n                        </Fragment>\n                        : <div>\n                            <p>{`Status: ${status}`}</p>\n                            <p>{`Title: ${title}`}</p>\n                            <p>{description}</p>\n                        </div>                        \n                    }\n                </div>                             \n            </div>\n        )\n    }\n}","import React from 'react';\n\nimport './App.css';\n\nexport function Avatar({ path, initials }) {\n    if (path) {\n        return (\n            <img class=\"section-card-info-graph-avatar avatar-lay\" src={path} alt=\"\"></img>\n        )\n    } else {\n        return (\n            <div class=\"section-card-info-graph-initials flex-center\">{initials}</div>\n        )\n    }\n}","import React from 'react';\nimport {Link} from 'react-router-dom';\n\nimport {Avatar} from './Avatar';\n\nimport './App.css';\n\nexport class Card extends React.Component {\n  handleDelete = (event) => {\n    this.props.onDeleteCard({...this.props});  \n    \n    event.stopPropagation();\n  }\n\n  handleModalInfo = (event) => {\n    this.props.onModalInfo(this.props);\n\n    event.stopPropagation();\n  }  \n\n  render() {\n    const {_id, imageSrc,title, description, avatars = []} = this.props;\n\n    return (\n      <div onClick={this.handleModalInfo} class=\"section-card flex-column\">\n        <div onClick={event => event.stopPropagation()} class=\"flex-row\">\n          <Link class=\"button-arrow-small\" to={_id}>&#187;</Link>          \n          <div onClick={this.handleDelete} class=\"button-x-small\">&#xd7;</div>\n        </div>\n        <div class=\"section-card-title\">{title}</div>\n        {imageSrc ? <img class=\"section-card-image\" src={imageSrc} alt=\"\"></img> : null}\n        <div class=\"section-card-info flex-row\">\n            <div class=\"section-card-info-text\">{description}</div>\n            <div class=\"section-card-info-graph flex-row\">                \n                {\n                  avatars.map(avatar => ( <Avatar {...avatar}/> ))\n                }                                                    \n            </div>  \n        </div>\n      </div>\n    )\n  }    \n}","import React from 'react';\nimport './App.css';\n\nexport function Header({text, amount}) {\n    return (\n        <div class=\"section-header flex-row\">\n            <div class=\"section-header-name\">{text}</div>\n            <div class=\"section-header-amount flex-center\">{amount}</div>\n        </div>\n    )\n}  ","import React from 'react';\nimport './App.css';\n\nimport {Card} from './Card';\nimport {Header} from './Header';\n\nexport class Section extends React.Component {\n    \n    render() {\n        const {status, cards, onModalInfo, onDeleteCard} = this.props;\n\n        let headerInfo = {\n            text: status,\n            amount: cards.length\n        };        \n\n        return (\n            <div class=\"section flex-column\">\n                <Header {...headerInfo} />                        \n                {\n                    cards && cards.map(card => ( \n                        <Card \n                            key={card._id}                            \n                            onDeleteCard={onDeleteCard} \n                            onModalInfo={onModalInfo}\n                            {...card} \n                        />\n                    ))\n                }\n            </div>\n        )\n    }\n}","import React from 'react';\nimport './App.css';\n\nexport class CardAddPanel extends React.Component {\n    constructor(props) {\n        super(props);        \n        this.state = {title: ''};\n    }\n\n    handleTitleChange = ({target}) =>  {\n        this.setState({title: target.value})\n    }\n\n    handleCreate = (event) => {\n        this.props.onCreateCard(this.state.title);\n        \n        this.setState({title: ''})\n    }\n\n    handleInputKeyPress = (event) => {\n        if (event.key === 'Enter') {\n            this.handleCreate();\n        }\n    }\n\n    render() {\n        return (\n            <div>\n                <input type=\"text\" value={this.state.title} onChange={this.handleTitleChange} onKeyPress={this.handleInputKeyPress} />\n                <button onClick={this.handleCreate}>Create</button> \n            </div>           \n        );\n    }\n}","export function findCardById(id, dataByStatuses) {\n    let card = null;\n            \n    dataByStatuses && Object.values(dataByStatuses).find(array => (\n        card = array.find(item => item._id === id)             \n    ));\n    \n    return card || null;\n}","import React, { Fragment } from 'react';\n\nimport {ModalCard} from './ModalCard';\nimport {CardInfo} from './CardInfo';\nimport {Section} from './Section';\nimport {CardAddPanel} from './CardAddPanel';\n\nimport {findCardById} from './appFunctions';\nimport {cardCreate, cardDelete, cardChange} from './networkFunctions';\n\nexport class HomePage extends React.Component {\n    handleCreateCard = async(title) => {        \n        const {statuses, dataByStatuses} = this.props.dataCard;\n        let body = {title}        \n          \n        let card = await cardCreate(body);\n        \n        let {status} = card;        \n        let updateDataByStatuses = {\n            ...dataByStatuses,\n            [status]: [...(dataByStatuses[status] || []), card]\n        };       \n        \n        this.props.updateData({   \n            dataCard: {\n                dataByStatuses: updateDataByStatuses,\n                statuses\n            },           \n        });               \n    }\n\n    handleDeleteCard = async({_id, status}) => {\n        const {statuses, dataByStatuses} = this.props.dataCard;\n\n        if (!(await cardDelete(_id))) {\n            return;\n        }\n        \n        let arrayCards = dataByStatuses[status].filter(item => item._id !== _id);\n        let updateDataByStatuses = {\n            ...dataByStatuses,\n            [status]: arrayCards\n        }\n        \n        if (!arrayCards.length) {\n            delete updateDataByStatuses[status];            \n        }\n        \n        this.props.updateData({       \n            dataCard: {\n                dataByStatuses: updateDataByStatuses,\n                statuses\n            },                       \n        });\n    }\n\n    handleChange = (key) => (async(value, {_id, status}) => {\n        const {statuses, dataByStatuses} = this.props.dataCard;\n\n        await cardChange(_id, {[key]: value});\n\n        let arrayChange = dataByStatuses[status].map(item => item._id === _id\n            ? {...item, [key]: value}\n            : item\n        );\n\n        this.props.updateData({\n            dataCard: {\n                dataByStatuses: {\n                    ...dataByStatuses,\n                    [status]: arrayChange\n                },\n                statuses\n            }\n        });\n    })\n\n    handleChangeStatus = async(newStatus, card) => {\n        let {statuses, dataByStatuses} = this.props.dataCard;\n        let {_id, status} = card;\n\n        await cardChange(_id, {status: newStatus});\n\n        let arrayChange = dataByStatuses[status].filter(item => item._id !== _id);\n        let newCard = {\n            ...card,\n            status: newStatus\n        };\n        let dataByStatusesNew = {\n            ...dataByStatuses,\n            [status]: arrayChange,\n            [newStatus]: [...dataByStatuses[newStatus], newCard]\n        };\n        \n        this.props.updateData({\n            dataCard: {\n                dataByStatuses: dataByStatusesNew,\n                statuses\n            }\n        }); \n    }\n\n    handleModalInfo = ({_id}) => {\n        document.body.style.overflow = 'hidden';\n        \n        this.props.updateData({            \n            idCard: _id\n        });        \n    }\n\n    handleCloseModal = () => {\n        document.body.style.overflow = 'visible';\n\n        this.props.updateData({            \n            idCard: null                \n        });\n    }\n\n    handleLogout = () => {\n        localStorage.removeItem('email');\n\n        this.props.updateData({            \n            isLogin: false           \n        });\n    }\n\n    render() {\n        const {idCard} = this.props;   \n        const {statuses, dataByStatuses} = this.props.dataCard;               \n\n        return (\n            <Fragment>\n                <CardAddPanel onCreateCard={this.handleCreateCard} />\n                <div class=\"homepage-overlay flex-row\">\n                    <div class=\"flex-row\">\n                        {statuses && statuses.map(status => ( \n                            <Section \n                                status={status} \n                                cards={dataByStatuses[status] || []}                        \n                                onDeleteCard={this.handleDeleteCard}\n                                onModalInfo={this.handleModalInfo}\n                            />))}\n                    </div>\n                    <div class=\"homepage-region-logout flex-column\">\n                        <button onClick={this.handleLogout} class=\"button-logout\">Logout</button>\n                    </div>\n                </div>                           \n                {idCard && \n                    <ModalCard \n                        onCloseModal={this.handleCloseModal}                   \n                    >\n                        {() => <CardInfo \n                            isChanging={true}\n                            statuses={statuses}\n                            card={findCardById(idCard, dataByStatuses)}\n                            onChangeStatus={this.handleChangeStatus}\n                            onChangeTitle={this.handleChange('title')}\n                            onChangeDescription={this.handleChange('description')}                            \n                        />}\n                    </ModalCard>}   \n            </Fragment>\n        )        \n    }\n}","import React from 'react';\nimport {\n    useParams,\n    Redirect\n} from 'react-router-dom';\n\nimport {CardInfo} from './CardInfo';\n\nimport {findCardById} from './appFunctions';\n\nexport function CardPage({dataByStatuses}) { \n    let {id} = useParams();           \n    let card = findCardById(id, dataByStatuses);      \n\n    return (        \n        card \n        ? <div>\n            <CardInfo card={card} />                   \n        </div>\n        : <Redirect to=\"/\" />                           \n    )    \n}","import React from 'react';\n\nimport {Link} from 'react-router-dom';\n\nexport function LoginPage({buttonText, linkText, linkUrl, message, onSubmitLoginForm, onChangeLoginInput}) {\n    return (\n        <div class=\"login-overlay\"> \n            <div class=\"flex-center login-window\" >\n                <form onSubmit={onSubmitLoginForm} class=\"flex-column\">\n                    {message && <div class=\"login-message-region\">{message}</div>}\n                    <input onChange={onChangeLoginInput} class=\"login-textbox-email\" type=\"text\" name=\"userEmail\" placeholder=\"Email or phone number\" />\n                    <input onChange={onChangeLoginInput} class=\"login-textbox-password\" type=\"password\" name=\"userPassword\" placeholder=\"Password\" />\n                    <div class=\"login-region-submit\">\n                        <button class=\"login-submit-button\" name={buttonText}>{buttonText}</button>\n                        <Link class=\"login-link\" to={linkUrl} >{linkText}</Link>\n                    </div>\n                </form>\n            </div>\n        </div>\n    )\n}","import React, { Fragment } from 'react';\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Route,\n    Redirect\n  } from 'react-router-dom';\n\nimport {getSettings, getDataCards, login, signUp} from './networkFunctions';\n\nimport {HomePage} from './HomePage';\nimport {CardPage} from './CardPage';\nimport {LoginPage} from './LoginPage';\n\nimport './App.css';\n\nclass App extends React.Component {  \n    constructor(props) {\n        let email = localStorage.getItem('email');\n\n        super(props);        \n        this.state = {\n            dataCard: {\n                statuses: null,\n                dataByStatuses: null\n            },            \n            idCard: null,\n            isLogin: !!email,\n            email                                \n        };  \n    }\n\n    async componentDidMount() {\n        const {email} = this.state;\n\n        this.setState({\n            dataCard: email ? await this.dataRequest() : {}                               \n        });        \n    }   \n    \n    async dataRequest() {\n        let statuses = await getSettings();  \n        let cards = await getDataCards();\n      \n        let dataCard = {\n            statuses,\n            dataByStatuses: statuses.reduce((acc, status) => ({\n                ...acc, \n                [status]: []\n            }), {})\n        };        \n\n        cards.forEach((card) => {\n            let {status} = {...card}\n            let {dataByStatuses} = dataCard;\n\n            dataByStatuses[status].push(card);\n        });\n\n        return dataCard;\n    }\n\n    updateData = (value) => {\n        this.setState(value);\n    }    \n\n    handlerChangeLoginInput = ({target}) => {\n        const {value, name} = target;\n\n        this.setState({\n            messageLoginForm: null,\n            [name]: value\n        });\n    }\n\n    handlerSubmitForm = (networkFunction) => async(event) => {\n        event.preventDefault();\n\n        let body = {\n            email: this.state.userEmail,\n            password: this.state.userPassword\n        }\n\n        let response = await networkFunction(body);\n\n        localStorage.setItem('email', response.email);\n\n        let {email} = response;\n\n        this.setState({\n            isLogin: !!email,\n            messageLoginForm: email ? null : 'Wrong password or email!',\n            dataCard: email ? await this.dataRequest() : {}\n        });\n    }\n\n    render() {     \n        const {state, updateData} = this;\n        const {isLogin, messageLoginForm} = this.state;\n        \n        return (\n            <Router>\n                <Switch>\n                    {isLogin \n                        ? <Fragment>\n                            <Route exact path=\"/\">\n                                <HomePage {...state} updateData={updateData} />                                  \n                            </Route>\n                            <Route path=\"/:id\">\n                                <CardPage {...this.state.dataCard} />\n                            </Route>                            \n                        </Fragment>\n                        : <Fragment>\n                            <Route exact path=\"/\">\n                                <Redirect to=\"/login\" />\n                            </Route>\n                            <Route path=\"/login\">                            \n                                <LoginPage                                                        \n                                    buttonText=\"Login\"\n                                    linkText=\"SignUp?\" \n                                    linkUrl=\"/register\"\n                                    message={messageLoginForm}\n                                    onSubmitLoginForm={this.handlerSubmitForm(login)}\n                                    onChangeLoginInput={this.handlerChangeLoginInput}\n                                />                        \n                            </Route>\n                            <Route path=\"/register\">\n                                <LoginPage                            \n                                    buttonText=\"SignUp\"\n                                    linkText=\"Login\"\n                                    linkUrl=\"/login\"\n                                    onSubmitLoginForm={this.handlerSubmitForm(signUp)}\n                                    onChangeLoginInput={this.handlerChangeLoginInput}                            \n                                />\n                            </Route>\n                        </Fragment> \n                    }                             \n                </Switch>\n            </Router>\n        );\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}